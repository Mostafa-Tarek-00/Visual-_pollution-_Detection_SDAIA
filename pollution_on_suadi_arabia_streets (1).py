# -*- coding: utf-8 -*-
"""Pollution_on_Suadi_Arabia_streets

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dvrfyv3DNpXy0sGsxFTLf7HWmF7oa9HN

#Install Dependencies

here we will Install our YOLO model to begin usage.
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/WongKinYiu/yolov7
# %cd yolov7
!pip install -r requirements.txt

"""#Collecting our annotated Data via Roboflow API"""

!pip install roboflow
from roboflow import Roboflow
rf = Roboflow(api_key="gq66yNnlsvLcETxVYbMq")
project = rf.workspace("pollution-vzkgz").project("pol-lkb1w")
dataset = project.version(2).download("yolov7")

"""#Begin training YOLOV7 Model"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov7
!wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7_training.pt

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov7
!python train.py --batch 16 --epochs 10 --workers 8 --data {dataset.location}/data.yaml --weights 'yolov7_training.pt' --device 0

"""#Running Inference on Test Images"""

!python detect.py --weights runs/train/exp/weights/best.pt --conf 0.1 --source {dataset.location}/test/images

import glob
from IPython.display import Image, display
i = 0
limit = 10000
for imageName in glob.glob('/content/yolov7/runs/detect/exp/*.jpg'): 
    if i < limit:
      display(Image(filename=imageName))
      print("\n")
    i = i + 1

"""# Testing on the model


"""

!pip install pydotplus
!pip install gTTS
import matplotlib.pyplot as plt
import pydotplus
from IPython.display import display, Image
import matplotlib.pyplot as plt
import cv2
from gtts import gTTS
import IPython.display as ipd
from requests import get

# run this cell if you didn't do that before (if it is the first use)
!pip install roboflow
from roboflow import Roboflow
rf = Roboflow(api_key="gq66yNnlsvLcETxVYbMq")
project = rf.workspace("pollution-vzkgz").project("pol-lkb1w")
dataset = project.version(2).download("yolov7")

model = project.version(2).model

img = cv2.imread("PUT_YOUR_IMAGE_PATH")

img = cv2.resize(img, (512,512))

result = model.predict(img, confidence=50, overlap=50).json()

predictions = result["predictions"][0]
output_img = predictions["image_path"]
x,y,w,h = predictions["x"], predictions["y"], predictions["width"], predictions["height"]

#To see the predictions boundary box coordinates
result

x1 = round(x - (w/2))
y1 = round(y - (h/2))
x2 = round(x + (w/2))
y2 = round(y + (h/2))

output_img = img[y1:y2, x1:x2]
plt.imshow(output_img)



